---
- name: Run commands on Cisco switches and save output in JSON file
  hosts: all
  gather_facts: no
  connection: network_cli
  collections:
    - cisco.ios
  
  tasks:

    - name: Validate VLAN list and names
      ios_command:
        commands:
          - show vlan brief
      register: vlan_output

    - name: Extract VLAN info via regex
      set_fact:
          vlan_brief: "{{ vlan_output.stdout[0] | regex_findall('^(\\d+)\\s+(.+?)\\s{2,}', multiline=True) }}"

    - name: Validate IP address on interface
      ios_command:
        commands:
          - show run | section interface
      register: ip_address_output

    - name: Extract IP address via regex
      set_fact:
        ip_address: "{{ ip_address_output.stdout[0] | regex_findall('interface.+\\n.+\\n(?: .\\n)*? ip address.+', multiline=True) }}"

    - name: Validate Interface description on interface
      ios_command:
        commands:
          - show interface description
      register: int_des_output

    - name: Extract interface description via regex
      set_fact:
        int_des: "{{ int_des_output.stdout[0] | regex_findall('^\\S{4,8}\\s{2,}.+', multiline=True) }}"

    - name: Validate VTP status
      ios_command:
        commands:
          - show vtp status
      register: vtp_output

    - name: Extract vtp status via regex
      set_fact:
        vtp: "{{ vtp_output.stdout[0] | regex_findall('VTP Domain.+|VTP Pruning.+|VTP Operating.+', multiline=True) }}"
      
    - name: Validate Trunk Interfaces
      ios_command:
        commands:
          - show interface trunk
      register: int_trunk_output

    - name: Validate CDP neighbours
      ios_command:
        commands:
          - show cdp neighbors
      register: cdp_nei_output

    - name: Validate DHCP configuration
      ios_command:
        commands:
          - show run | section dhcp
      register: dhcp_output

    - name: Extract DHCP via regex
      set_fact:
        dhcp: "{{ dhcp_output.stdout[0] | regex_findall('dhcp.*|err.*|snmp.*', multiline=True) }}"

    - name: Validate Tacacs configuration
      ios_command:
        commands:
          - show running-config | section tacacs
      register: tacacs_output

    - name: Extract Tacacs configuration via regex
      set_fact:
          tacacs: "{{ tacacs_output.stdout[0] | regex_findall('aaa.*|server.*|ip.*|no.*|tacacs.*|address.*|key.*|time.*', multiline=True) }}"

    - name: Check log server configuration
      ios_command:
        commands:
          - show running-config | section logging
      register: log_server_output

    - name: Extract log server via regex
      set_fact:
          log_server: "{{ log_server_output.stdout[0] | regex_findall('loggin.*|hw.*|ip.*|no.*|emp.*', multiline=True) }}"

    - name: Check Interfae Status configuration
      ios_command:
        commands:
          - show interface status
      register: int_status_output
    
    - name: Check SpanningTree status
      ios_command:
        commands:
          - show spanning-tree summary
      register: spanning_output

    - name: Extract spanning tree status via regex
      set_fact:
          spanning_tree: "{{ spanning_output.stdout[0] | regex_findall('Switch.+|Root.+|EtherChannel.+|Extended.+|Port.+|Loopguard.+|UplinkFast.+|BackboneFast.+|Configured.+', multiline=True) }}"
    
    - name: Validate port-channel mode
      ios_command:
        commands:
          - show running-config | section channel-group
      register: portchannel_mode_output

    - name: Extract Portchannel Mode via regex
      set_fact:
          portchannel_mode: "{{ portchannel_mode_output.stdout[0] | regex_findall('channel-group.*', multiline=True) }}"
    
    - name: Validate port-channel protocol
      ios_command:
        commands:
          - sh etherchannel summary
      register: portchannel_protocol_output

    - name: Extract Portchannel protocol via regex
      set_fact:
          portchannle_protocol: "{{ portchannel_protocol_output.stdout[0] | regex_findall('Po\\d.+', multiline=True) }}"

    - name: Confirm MTU settings on  interfaces
      ios_command:
        commands:
          - show interfaces
      register: mtu_output

    - name: Extract MTU value via regex
      set_fact:
          interface_mtu: "{{ mtu_output.stdout[0] | regex_findall('GigabitEthernet\\d+/\\d+(?:/\\d+)?|(?:[Tt]en|[Tt]wo)[Gg]igabit[Ee]thernet\\d.+/\\d+(?:/\\d+)?|Vlan\\d+|MTU \\d+', multiline=True) }}"

    - name: Validate system MTU settings
      ios_command:
        commands:
          - show system mtu
      register: system_mtu_output
    
    - name: Confirm OS Version
      ios_command:
        commands:
          - show version
      register: version_output

    - name: Extract OS Version via regex
      set_fact:
          os_version: "{{ version_output.stdout[0] | regex_findall('Switch Software.+|uptime is.+|System restarted.+|System image.+|Last.+|Model N.+|System Serial.+', multiline=True) }}"

    - name: Validate Inventory
      ios_command:
        commands:
          - show inventory
      register: inventory_output

    - name: Extract Inventory details via regex
      set_fact:
          Inventory: "{{ inventory_output.stdout[0] | regex_findall('^NAME: \\S{2,} \\S{0,5}|PID:\\s[^ ,]+', multiline=True) }}"
    
    - name: Validate Environment status
      ios_command:
        commands:
          - show  environment all
      register: environment_output

    - name: Validate Module status
      ios_command:
        commands:
          - show  module
      register: module_output

    - name: Validate stack status
      ios_command:
        commands:
          - show switch detail
      register: stack_output
    
    - name: Validate License usage
      ios_command:
        commands:
          - sh license usage
      register: lic_usage_output

    - name: Extract License usage details via regex
      set_fact:
          License: "{{ lic_usage_output.stdout[0] | regex_findall('Description.+|Status.+', multiline=True) }}"

    - name: Validate License status
      ios_command:
        commands:
          - sh license status
      register: lic_status_output

    - name: Validate ARP enteries
      ios_command:
        commands:
          - show arp
      register: arp_output

    - name: Validate Routing Table
      ios_command:
        commands:
          - show ip route
      register: route_output

    - name: Validate archive config differences
      ios_command:
        commands:
          - sh archive config differences
      register: archive_output

    - name: Verify NTP server
      ios_command:
        commands:
          - show running-config | include ntp
      register: ntp_output
    - name: Extract NTP Details via regex
      set_fact: 
          ntp: "{{ ntp_output.stdout[0] | regex_findall('ntp.+', multiline=True) }}"

    
    - name: Fetch VTY configuration output
      ios_command:
        commands:
          - show running-config | section line vty
      register: vty_output

    - name: Verify VTY access-list
      ios_command:
        commands:
          - sh run | sec access-list standard VTYACCESS
      register: vty_acl_output
    
    - name: Extract VTY Access list via regex
      set_fact:
          vty_acl: "{{ vty_acl_output.stdout[0] | regex_findall('ip.*|\\s+\\d+\\s(remark|permit|deny)\\s+(.*|any)', multiline=True) }}"

    
    - name: Check SNMP information
      ios_command:
        commands:
          - show run | section snmp
      register: snmp_output

    - name: Extract SNMP information via regex
      set_fact:
        snmp: "{{ snmp_output.stdout[0] | regex_findall('snmp-serv.+', multiline=True) }}"
    
    - name: Verify SNMP access-list
      ios_command:
        commands:
          - show running-config | sec access-list standard SNMP-RO
      register: snmp_acl_output
    - name: Extract SNMP Access list via regex
      set_fact:
          snamp_Acl: "{{ snmp_acl_output.stdout[0] | regex_findall('ip.*|\\s+\\d+\\s(remark|permit|deny)\\s+(.*|any)', multiline=True) }}"

    - name: Verify login banner
      ios_command:
        commands:
          - show running-config
      register: banner_output

    - name: Extract login banner via regex
      set_fact: 
          login_banner: "{{ banner_output.stdout[0] | regex_search('banner exec \\^C([\\s\\S]*?)\\^C') }}"

    - name: Verify MOTD banner
      ios_command:
        commands:
          - show running-config
      register: banner_motd_output

    - name: Extract MOTD banner via regex
      set_fact: 
          banner_motd: "{{ banner_motd_output.stdout[0] | regex_search('banner motd \\^C([\\s\\S]*?)\\^C') }}"
  
    - name: Verify uplink interface configuration
      ios_command:
        commands:
          - show running-config | section interface
      register: uplink_interface_output

    - name: Extract uplink interface block via regex
      set_fact:
          uplink_interface: "{{ uplink_interface_output.stdout[0] | regex_search('^^interface\\s[^\n]+\n(?: .*\n)*? description .*au-br2.*\n(?: .*\n)*', multiline=True) }}"

    - name: Verify clock
      ios_command:
        commands:
          - show clock detail
      register: clock_output

    - name: Verify Running Configuration
      ios_command:
        commands:
          - show run
      register: run_output

    - name: Ensure output directory exists (control node)
      ansible.builtin.file:
        path: "./outputs"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true

    - name: Aggregate collected command outputs (raw registers)
      set_fact:
        collected_outputs: >-
          {{
            {
              'hostname': hostname_output | default(''),
              'data': {
                'vty': vty_output | default({}),
                'vty_ACL': vty_acl_output | default({}),
                'snmp': snmp_output | default({}),
                'snmp_ACL': snmp_acl_output | default({}),
                'dhcp': dhcp_output | default({}),
                'ise': ise_output | default({}),
                'aaa': aaa_output | default({}),
                'vlan': vlan_output | default({}),
                'dot1x': dot1x_output | default({}),
                'logging': logging_output | default({}),
                'portchannel': portchannel_output | default({}),
                'mtu': mtu_output | default({}),
                'system_mtu': system_mtu_output | default({}),
                'mgmt_ip': mgmt_ip_output | default({}),
                'Banner': banner_output | default({}),
                'ntp': ntp_output | default({}),
                'Uplink_if': uplink_interface_output | default({}),
                'version': version_output | default({}),
                'License': license_output | default({}),
                'route': route_output | default({}),
                'clock': clock_output | default({})
              }
            }
          }}
   
    #- name: Ensure destination dir exists on linux server (delegated)
      #file:
        #path: /var/log/ansible/switch-reports
        #state: directory
        #mode: '0755'
      #delegate_to: "{{ groups['linux_servers'][0] }}"
      #become: yes                         # if writing to privileged path
      #run_once: false
    #- name: Write switch output to a file on the linux server (delegated)
      #copy:
        #content: |
          #Host: {{ inventory_hostname }}
          #----
          #{{ collected_outputs | to_nice_json }}
        #dest: "/var/log/ansible/switch-reports/{{ inventory_hostname }}-vty.txt"
       # mode: '0644'
     # delegate_to: "{{ groups['linux_servers'][0] }}"
      #become: yes
      
      
    
